// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Jest from "../../node_modules/@glennsl/bs-jest/src/jest.js";
import * as Vector from "../../src/core/Vector.bs.js";

Jest.describe("Vector", (function (param) {
        var v1Int = /* tuple */[
          5,
          6
        ];
        var v2Int = /* tuple */[
          7,
          -2
        ];
        var v1Float = /* tuple */[
          5.4,
          6.8
        ];
        var v2Float = /* tuple */[
          7.2,
          -2.6
        ];
        Jest.describe("add", (function (param) {
                return Jest.test("should expose a function for adding two vectors composed of integer values", (function (param) {
                              return Jest.Expect.toEqual(/* tuple */[
                                          12,
                                          4
                                        ], Jest.Expect.expect(Vector.add(v1Int, v2Int)));
                            }));
              }));
        Jest.describe("addf", (function (param) {
                Jest.test("should expose a function for adding two vectors composed of float values (x value)", (function (param) {
                        return Jest.Expect.toBeCloseTo(12.6, Jest.Expect.expect(Vector.addf(v1Float, v2Float)[0]));
                      }));
                return Jest.test("should expose a function for adding two vectors composed of float values (y value)", (function (param) {
                              return Jest.Expect.toBeCloseTo(4.2, Jest.Expect.expect(Vector.addf(v1Float, v2Float)[1]));
                            }));
              }));
        Jest.describe("sub", (function (param) {
                return Jest.test("should expose a function for subtracting two vectors composed of integer values", (function (param) {
                              return Jest.Expect.toEqual(/* tuple */[
                                          -2,
                                          8
                                        ], Jest.Expect.expect(Vector.sub(v1Int, v2Int)));
                            }));
              }));
        Jest.describe("subf", (function (param) {
                Jest.test("should expose a function for subtracting two vectors composed of float values (x value)", (function (param) {
                        return Jest.Expect.toBeCloseTo(-1.8, Jest.Expect.expect(Vector.subf(v1Float, v2Float)[0]));
                      }));
                return Jest.test("should expose a function for subtracting two vectors composed of float values (y value)", (function (param) {
                              return Jest.Expect.toBeCloseTo(9.4, Jest.Expect.expect(Vector.subf(v1Float, v2Float)[1]));
                            }));
              }));
        Jest.describe("mult", (function (param) {
                return Jest.test("should expose a function for multiplying an integer vector by an integer scalar", (function (param) {
                              return Jest.Expect.toEqual(/* tuple */[
                                          40,
                                          48
                                        ], Jest.Expect.expect(Vector.mult(v1Int, 8)));
                            }));
              }));
        Jest.describe("multf", (function (param) {
                Jest.test("should expose a function for multiplying a float vector by a float scalar (x value)", (function (param) {
                        return Jest.Expect.toBeCloseTo(44.55, Jest.Expect.expect(Vector.multf(v1Float, 8.25)[0]));
                      }));
                return Jest.test("should expose a function for multiplying a float vector by a float scalar (y value)", (function (param) {
                              return Jest.Expect.toBeCloseTo(56.1, Jest.Expect.expect(Vector.multf(v1Float, 8.25)[1]));
                            }));
              }));
        Jest.describe("div", (function (param) {
                return Jest.test("should expose a function for dividing an integer vector by an integer scalar (x value)", (function (param) {
                              return Jest.Expect.toEqual(/* tuple */[
                                          0,
                                          0
                                        ], Jest.Expect.expect(Vector.div(v1Int, 8)));
                            }));
              }));
        Jest.describe("divf", (function (param) {
                Jest.test("should expose a function for dividing a float vector by a float scalar (x value)", (function (param) {
                        return Jest.Expect.toBeSoCloseTo(0.65, 2, Jest.Expect.expect(Vector.divf(v1Float, 8.25)[0]));
                      }));
                return Jest.test("should expose a function for dividing a float vector by a float scalar (y value)", (function (param) {
                              return Jest.Expect.toBeSoCloseTo(0.82, 2, Jest.Expect.expect(Vector.divf(v1Float, 8.25)[1]));
                            }));
              }));
        Jest.describe("mag", (function (param) {
                return Jest.test("should expose a function for deriving the magnitude of an integer vector", (function (param) {
                              return Jest.Expect.toBeSoCloseTo(8, 0, Jest.Expect.expect(Vector.mag(v1Int)));
                            }));
              }));
        Jest.describe("magf", (function (param) {
                return Jest.test("should expose a function for deriving the magnitude of a float vector", (function (param) {
                              return Jest.Expect.toBeSoCloseTo(8.7, 1, Jest.Expect.expect(Vector.magf(v1Float)));
                            }));
              }));
        Jest.describe("norm", (function (param) {
                Jest.test("should expose a function for normalizing an integer vector to a unit vector (magnitude of 1, x value)", (function (param) {
                        return Jest.Expect.toBeSoCloseTo(0.6, 1, Jest.Expect.expect(Vector.norm(v1Int)[0]));
                      }));
                return Jest.test("should expose a function for normalizing an integer vector to a unit vector (magnitude of 1, y value)", (function (param) {
                              return Jest.Expect.toBeSoCloseTo(0.8, 1, Jest.Expect.expect(Vector.norm(v1Int)[1]));
                            }));
              }));
        Jest.describe("normf", (function (param) {
                Jest.test("should expose a function for normalizing an integer vector to a unit vector (magnitude of 1, x value)", (function (param) {
                        return Jest.Expect.toBeSoCloseTo(0.62, 2, Jest.Expect.expect(Vector.normf(v1Float)[0]));
                      }));
                return Jest.test("should expose a function for normalizing an integer vector to a unit vector (magnitude of 1, y value)", (function (param) {
                              return Jest.Expect.toBeSoCloseTo(0.78, 2, Jest.Expect.expect(Vector.normf(v1Float)[1]));
                            }));
              }));
        Jest.describe("lerp", (function (param) {
                return Jest.test("should expose a function for linearly interpolating between two integer vectors", (function (param) {
                              return Jest.Expect.toEqual(/* tuple */[
                                          6,
                                          2
                                        ], Jest.Expect.expect(Vector.lerp(v1Int, v2Int, 0.5)));
                            }));
              }));
        return Jest.describe("lerpf", (function (param) {
                      Jest.test("should expose a function for linearly interpolating between two float vectors (x value)", (function (param) {
                              return Jest.Expect.toBeCloseTo(6.3, Jest.Expect.expect(Vector.lerpf(v1Float, v2Float, 0.5)[0]));
                            }));
                      return Jest.test("should expose a function for linearly interpolating between two float vectors (y value)", (function (param) {
                                    return Jest.Expect.toBeCloseTo(2.1, Jest.Expect.expect(Vector.lerpf(v1Float, v2Float, 0.5)[1]));
                                  }));
                    }));
      }));

var it = Jest.test;

export {
  it ,
  
}
/*  Not a pure module */
