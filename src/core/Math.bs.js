// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Utils from "./Utils.bs.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";

function sq(x) {
  return Caml_int32.imul(x, x);
}

function sqf(x) {
  return x * x;
}

function pow(base, exp) {
  if (exp !== 0) {
    if (exp !== 1) {
      if (exp < 0) {
        return 1 / Utils.foi(base) * pow(base, exp + 1 | 0);
      } else {
        return Utils.foi(base) * pow(base, exp - 1 | 0);
      }
    } else {
      return Utils.foi(base);
    }
  } else {
    return 1;
  }
}

function lerpf(acc, target, roundness) {
  return (1.0 - roundness) * acc + roundness * target;
}

function lerp(acc, target, roundness) {
  return Utils.iof(lerpf(Utils.foi(acc), Utils.foi(target), roundness));
}

function remapf(value, low1, high1, low2, high2) {
  return low2 + (high2 - low2) * ((value - low1) / (high1 - low1));
}

function remap(value, low1, high1, low2, high2) {
  return Utils.iof(remapf(Utils.foi(value), Utils.foi(low1), Utils.foi(high1), Utils.foi(low2), Utils.foi(high2)));
}

function norm(value, low, high) {
  return remapf(value, low, high, 0, 1);
}

function constrain(low, high, n) {
  if (Caml_obj.caml_lessthan(n, low)) {
    return low;
  } else if (Caml_obj.caml_greaterthan(n, high)) {
    return high;
  } else {
    return n;
  }
}

export {
  sq ,
  sqf ,
  pow ,
  lerp ,
  lerpf ,
  remap ,
  remapf ,
  norm ,
  constrain ,
  
}
/* No side effect */
