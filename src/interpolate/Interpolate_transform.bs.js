// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Utils from "../core/Utils.bs.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as Interpolate_unit from "./Interpolate_unit.bs.js";
import * as Interpolate_number from "./Interpolate_number.bs.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -1057888900,
    "perspective"
  ],
  /* tuple */[
    -914368690,
    "translate"
  ],
  /* tuple */[
    -887077285,
    "rotate"
  ],
  /* tuple */[
    -866839798,
    "skew"
  ],
  /* tuple */[
    -249738851,
    "rotateX"
  ],
  /* tuple */[
    -249738850,
    "rotateY"
  ],
  /* tuple */[
    -249738849,
    "rotateZ"
  ],
  /* tuple */[
    -120664438,
    "scale"
  ],
  /* tuple */[
    -31746546,
    "skewX"
  ],
  /* tuple */[
    -31746545,
    "skewY"
  ],
  /* tuple */[
    -31746544,
    "skewZ"
  ],
  /* tuple */[
    106728778,
    "translateX"
  ],
  /* tuple */[
    106728779,
    "translateY"
  ],
  /* tuple */[
    106728780,
    "translateZ"
  ],
  /* tuple */[
    1009117838,
    "scaleX"
  ],
  /* tuple */[
    1009117839,
    "scaleY"
  ],
  /* tuple */[
    1009117840,
    "scaleZ"
  ]
];

function parseTransform(transform) {
  var idx;
  try {
    idx = $$String.index(transform, /* "(" */40);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* record */[
              /* transform */transform,
              /* transformProperty */null
            ];
    } else {
      throw exn;
    }
  }
  var param = transform.substring(0, idx);
  var property = Js_mapperRt.revSearch(17, jsMapperConstantArray, param);
  var value = transform.substring(idx + 1 | 0, $$String.index_from(transform, idx + 1 | 0, /* ")" */41));
  if (property !== undefined) {
    return /* record */[
            /* transform */value,
            /* transformProperty */Js_mapperRt.binarySearch(17, property, jsMapperConstantArray)
          ];
  } else {
    return /* record */[
            /* transform */value,
            /* transformProperty */null
          ];
  }
}

function remapTransform(param, param$1, value) {
  var rl = param[0];
  var match = parseTransform(param$1[0]);
  var dlTransformProperty = match[/* transformProperty */1];
  var match$1 = parseTransform(param$1[1]);
  var progress = (value - rl) / (param[1] - rl);
  var match$2 = Interpolate_unit.parseUnit(match[/* transform */0]);
  var dlUnit = match$2[/* unit */1];
  var match$3 = Interpolate_unit.parseUnit(match$1[/* transform */0]);
  var output = Interpolate_number.lerpf(match$2[/* num */0], match$3[/* num */0], progress);
  if (dlTransformProperty == null) {
    if (dlUnit == null) {
      return "";
    } else {
      return Utils.sof(output) + dlUnit;
    }
  } else if (dlUnit == null) {
    return dlTransformProperty + ("(" + (Utils.sof(output) + ")"));
  } else {
    return dlTransformProperty + ("(" + (Utils.sof(output) + (dlUnit + ")")));
  }
}

export {
  parseTransform ,
  remapTransform ,
  
}
/* No side effect */
