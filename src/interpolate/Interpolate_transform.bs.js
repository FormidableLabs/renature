// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as Interpolate_unit from "./Interpolate_unit.bs.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -1057888900,
    "perspective"
  ],
  /* tuple */[
    -914368690,
    "translate"
  ],
  /* tuple */[
    -887077285,
    "rotate"
  ],
  /* tuple */[
    -866839798,
    "skew"
  ],
  /* tuple */[
    -249738851,
    "rotateX"
  ],
  /* tuple */[
    -249738850,
    "rotateY"
  ],
  /* tuple */[
    -249738849,
    "rotateZ"
  ],
  /* tuple */[
    -120664438,
    "scale"
  ],
  /* tuple */[
    -31746546,
    "skewX"
  ],
  /* tuple */[
    -31746545,
    "skewY"
  ],
  /* tuple */[
    -31746544,
    "skewZ"
  ],
  /* tuple */[
    106728778,
    "translateX"
  ],
  /* tuple */[
    106728779,
    "translateY"
  ],
  /* tuple */[
    106728780,
    "translateZ"
  ],
  /* tuple */[
    1009117838,
    "scaleX"
  ],
  /* tuple */[
    1009117839,
    "scaleY"
  ],
  /* tuple */[
    1009117840,
    "scaleZ"
  ]
];

function parseTransformSingle(transform) {
  var exit = 0;
  var openParens;
  try {
    openParens = $$String.index(transform, /* "(" */40);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* array */[/* record */[
                /* transform */transform,
                /* transformProperty */null
              ]];
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    var exit$1 = 0;
    var closeParens;
    try {
      closeParens = $$String.index(transform, /* ")" */41);
      exit$1 = 2;
    }
    catch (exn$1){
      if (exn$1 === Caml_builtin_exceptions.not_found) {
        return /* array */[/* record */[
                  /* transform */transform,
                  /* transformProperty */null
                ]];
      } else {
        throw exn$1;
      }
    }
    if (exit$1 === 2) {
      var param = transform.substring(0, openParens);
      var property = Js_mapperRt.revSearch(17, jsMapperConstantArray, param);
      var value = transform.substring(openParens + 1 | 0, closeParens);
      if (property !== undefined) {
        var p = property;
        var idx;
        try {
          idx = $$String.index(value, /* "," */44);
        }
        catch (exn$2){
          if (exn$2 === Caml_builtin_exceptions.not_found) {
            return /* array */[/* record */[
                      /* transform */value,
                      /* transformProperty */Js_mapperRt.binarySearch(17, p, jsMapperConstantArray)
                    ]];
          } else {
            throw exn$2;
          }
        }
        var x = (function (param) {
                  return (function (param$1) {
                      return value.substring(param, param$1);
                    });
                })(0)(idx).trim();
        var y = (function (param) {
                  return (function (param$1) {
                      return value.substring(param, param$1);
                    });
                })(idx + 1 | 0)(closeParens).trim();
        var tp = Js_mapperRt.binarySearch(17, p, jsMapperConstantArray);
        return /* array */[
                /* record */[
                  /* transform */x,
                  /* transformProperty */tp
                ],
                /* record */[
                  /* transform */y,
                  /* transformProperty */tp
                ]
              ];
      } else {
        return /* array */[/* record */[
                  /* transform */transform,
                  /* transformProperty */null
                ]];
      }
    }
    
  }
  
}

function remapTransformSingle(param, param$1, value) {
  var rh = param[1];
  var rl = param[0];
  var dlTransforms = parseTransformSingle(param$1[0]);
  var dhTransforms = parseTransformSingle(param$1[1]);
  var transformProperty = /* record */[/* contents */""];
  var transforms = $$Array.mapi((function (idx, param) {
            var dlTp = param[/* transformProperty */1];
            var match = Caml_array.caml_array_get(dhTransforms, idx);
            if (!(dlTp == null) && !(match[/* transformProperty */1] == null)) {
              transformProperty[0] = dlTp;
              return Interpolate_unit.remapUnit(/* tuple */[
                          rl,
                          rh
                        ], /* tuple */[
                          param[/* transform */0],
                          match[/* transform */0]
                        ], value);
            } else {
              return "";
            }
          }), dlTransforms).join(", ");
  return transformProperty[0] + ("(" + (transforms + ")"));
}

var transformsRe = (/(\w+)\((.+?)\)/g);

function splitTransform(transform, _$staropt$star, _param) {
  while(true) {
    var $staropt$star = _$staropt$star;
    var matches = $staropt$star !== undefined ? $staropt$star : /* array */[];
    var match = transformsRe.exec(transform);
    if (match !== null) {
      _param = /* () */0;
      _$staropt$star = $$Array.append(matches, Caml_array.caml_make_vect(1, match[0]));
      continue ;
    } else {
      return $$Array.map((function (m) {
                    if (m == null) {
                      return "";
                    } else {
                      return m;
                    }
                  }), matches);
    }
  };
}

function remapTransform(range, param, value) {
  var dlTransforms = splitTransform(param[0], undefined, /* () */0);
  var dhTransforms = splitTransform(param[1], undefined, /* () */0);
  return $$Array.mapi((function (idx, dlTransform) {
                  var dhTransform = Caml_array.caml_array_get(dhTransforms, idx);
                  return remapTransformSingle(range, /* tuple */[
                              dlTransform,
                              dhTransform
                            ], value);
                }), dlTransforms).join(" ");
}

export {
  parseTransformSingle ,
  remapTransformSingle ,
  splitTransform ,
  remapTransform ,
  
}
/* transformsRe Not a pure module */
