// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Utils from "../core/Utils.bs.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as Interpolate_number from "./Interpolate_number.bs.js";

var jsMapperConstantArray = /* array */[
  /* tuple */[
    22632,
    "em"
  ],
  /* tuple */[
    25096,
    "px"
  ],
  /* tuple */[
    26418,
    "vh"
  ],
  /* tuple */[
    26433,
    "vw"
  ],
  /* tuple */[
    5591841,
    "%"
  ],
  /* tuple */[
    5691738,
    "rem"
  ]
];

function parseUnit(value) {
  var num = parseFloat(value);
  var param = value.replace(Utils.sof(num), "");
  var unit = Js_mapperRt.revSearch(6, jsMapperConstantArray, param);
  if (unit !== undefined) {
    return /* record */[
            /* num */num,
            /* unit */Js_mapperRt.binarySearch(6, unit, jsMapperConstantArray)
          ];
  } else {
    return /* record */[
            /* num */num,
            /* unit */null
          ];
  }
}

function remapUnit(param, param$1, value) {
  var rl = param[0];
  var match = parseUnit(param$1[0]);
  var dlUnit = match[/* unit */1];
  var match$1 = parseUnit(param$1[1]);
  var progress = (value - rl) / (param[1] - rl);
  var output = Interpolate_number.lerpf(match[/* num */0], match$1[/* num */0], progress);
  if (dlUnit == null) {
    return Utils.sof(output);
  } else {
    return Utils.sof(output) + dlUnit;
  }
}

export {
  parseUnit ,
  remapUnit ,
  
}
/* No side effect */
