// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Interpolate_unit from "./Interpolate_unit.bs.js";
import * as Interpolate_color from "./Interpolate_color.bs.js";
import * as NormalizeColor from "../helpers/normalizeColor";

function rgba(prim) {
  return NormalizeColor.rgba(prim);
}

var defaultColor = "rgba(0, 0, 0, 1)";

var none = {
  offsetX: "0",
  offsetY: "0",
  blur: "0",
  spread: "0",
  color: defaultColor,
  inset: false
};

var commaWhitespaceRe = (/,\s/g);

var commaRe = (/,/g);

function recomposeColor(color) {
  var match = color.includes(",");
  if (match) {
    return color.replace(commaRe, ", ");
  } else {
    return color;
  }
}

function colorToRgba(color) {
  return Belt_Option.getWithDefault(Belt_Option.map(Caml_option.nullable_to_opt(NormalizeColor.normalizeColor(color)), rgba), {
              r: 0,
              g: 0,
              b: 0,
              a: 1
            });
}

function testBoxShadow(boxShadow) {
  if (boxShadow === "none") {
    return true;
  } else {
    var properties = boxShadow.replace(commaWhitespaceRe, ",").split(" ").filter((function (s) {
            if (s !== "inset") {
              return NormalizeColor.normalizeColor(s) === null;
            } else {
              return false;
            }
          }));
    var n = properties.length;
    if (n >= 2 && n <= 4) {
      return properties.every(Interpolate_unit.testUnit);
    } else {
      return false;
    }
  }
}

function parseBoxShadow(boxShadow) {
  var inset = boxShadow.includes("inset");
  var properties = boxShadow.replace(commaWhitespaceRe, ",").split(" ").filter((function (s) {
          return s !== "inset";
        }));
  var match = properties.length;
  switch (match) {
    case 2 :
        return {
                offsetX: Caml_array.caml_array_get(properties, 0),
                offsetY: Caml_array.caml_array_get(properties, 1),
                blur: "0",
                spread: "0",
                color: defaultColor,
                inset: inset
              };
    case 3 :
        return {
                offsetX: Caml_array.caml_array_get(properties, 0),
                offsetY: Caml_array.caml_array_get(properties, 1),
                blur: "0",
                spread: "0",
                color: recomposeColor(Caml_array.caml_array_get(properties, 2)),
                inset: inset
              };
    case 4 :
        return {
                offsetX: Caml_array.caml_array_get(properties, 0),
                offsetY: Caml_array.caml_array_get(properties, 1),
                blur: Caml_array.caml_array_get(properties, 2),
                spread: "0",
                color: recomposeColor(Caml_array.caml_array_get(properties, 3)),
                inset: inset
              };
    case 5 :
        return {
                offsetX: Caml_array.caml_array_get(properties, 0),
                offsetY: Caml_array.caml_array_get(properties, 1),
                blur: Caml_array.caml_array_get(properties, 2),
                spread: Caml_array.caml_array_get(properties, 3),
                color: recomposeColor(Caml_array.caml_array_get(properties, 4)),
                inset: inset
              };
    default:
      return none;
  }
}

function remapBoxShadow(param, param$1, value) {
  var rh = param[1];
  var rl = param[0];
  var dlBoxShadow = parseBoxShadow(param$1[0]);
  var dhBoxShadow = parseBoxShadow(param$1[1]);
  var offsetX = Interpolate_unit.remapUnit(/* tuple */[
        rl,
        rh
      ], /* tuple */[
        dlBoxShadow.offsetX,
        dhBoxShadow.offsetX
      ], value);
  var offsetY = Interpolate_unit.remapUnit(/* tuple */[
        rl,
        rh
      ], /* tuple */[
        dlBoxShadow.offsetY,
        dhBoxShadow.offsetY
      ], value);
  var blur = Interpolate_unit.remapUnit(/* tuple */[
        rl,
        rh
      ], /* tuple */[
        dlBoxShadow.blur,
        dhBoxShadow.blur
      ], value);
  var spread = Interpolate_unit.remapUnit(/* tuple */[
        rl,
        rh
      ], /* tuple */[
        dlBoxShadow.spread,
        dhBoxShadow.spread
      ], value);
  var color = Interpolate_color.remapColor(/* tuple */[
        rl,
        rh
      ], /* tuple */[
        colorToRgba(dlBoxShadow.color),
        colorToRgba(dhBoxShadow.color)
      ], value);
  var match = dlBoxShadow.inset && dhBoxShadow.inset;
  var inset = match ? "inset " : "";
  return inset + /* array */[
            offsetX,
            offsetY,
            blur,
            spread,
            color
          ].join(" ");
}

export {
  testBoxShadow ,
  parseBoxShadow ,
  remapBoxShadow ,
  
}
/*  Not a pure module */
