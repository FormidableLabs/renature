// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Parse_unit from "./Parse_unit.bs.js";
import * as Js_mapperRt from "bs-platform/lib/es6/js_mapperRt.js";
import * as Parse_number from "./Parse_number.bs.js";

var jsMapperConstantArray = [
  /* tuple */[
    -1057888900,
    "perspective"
  ],
  /* tuple */[
    -914368690,
    "translate"
  ],
  /* tuple */[
    -887077285,
    "rotate"
  ],
  /* tuple */[
    -866839798,
    "skew"
  ],
  /* tuple */[
    -249738851,
    "rotateX"
  ],
  /* tuple */[
    -249738850,
    "rotateY"
  ],
  /* tuple */[
    -249738849,
    "rotateZ"
  ],
  /* tuple */[
    -120664438,
    "scale"
  ],
  /* tuple */[
    -31746546,
    "skewX"
  ],
  /* tuple */[
    -31746545,
    "skewY"
  ],
  /* tuple */[
    -31746544,
    "skewZ"
  ],
  /* tuple */[
    106728778,
    "translateX"
  ],
  /* tuple */[
    106728779,
    "translateY"
  ],
  /* tuple */[
    106728780,
    "translateZ"
  ],
  /* tuple */[
    1009117838,
    "scaleX"
  ],
  /* tuple */[
    1009117839,
    "scaleY"
  ],
  /* tuple */[
    1009117840,
    "scaleZ"
  ]
];

var transformRe = /(\w+)\(([^)]*)\)/g;

function testTransform(val_) {
  var transform = transformRe.exec(val_);
  transformRe.lastIndex = 0;
  if (transform !== null) {
    return transform.filter((function (param, i) {
                    if (i === 1) {
                      return true;
                    } else {
                      return i === 2;
                    }
                  })).every((function (c) {
                  if (c == null) {
                    return false;
                  } else {
                    var isTransformUnit = Parse_unit.testUnit(c);
                    var isTransformNumber = Parse_number.testNumber(c);
                    var match = Js_mapperRt.revSearch(17, jsMapperConstantArray, c);
                    var isTransformProperty = match !== undefined;
                    var isTransformMultiple = c.split(", ").every((function (s) {
                            if (Parse_unit.testUnit(s)) {
                              return true;
                            } else {
                              return Parse_number.testNumber(s);
                            }
                          }));
                    if (isTransformUnit || isTransformNumber || isTransformProperty) {
                      return true;
                    } else {
                      return isTransformMultiple;
                    }
                  }
                }));
  } else {
    return false;
  }
}

var transformsRe = /(?:[^\s(]+|\([^)]*\))+/g;

function testTransforms(val_) {
  var transforms = val_.match(transformsRe);
  if (transforms !== null) {
    return transforms.every(testTransform);
  } else {
    return false;
  }
}

function parseTransform(val_) {
  var transform = transformRe.exec(val_);
  transformRe.lastIndex = 0;
  var t = {
    contents: {
      transform: null,
      transformProperty: null
    }
  };
  if (transform !== null) {
    var captures = transform.filter((function (param, i) {
            if (i === 1) {
              return true;
            } else {
              return i === 2;
            }
          }));
    $$Array.iteri((function (i, propOrValue) {
            if (i === 0) {
              var init = t.contents;
              t.contents = {
                transform: init.transform,
                transformProperty: propOrValue
              };
              return /* () */0;
            } else {
              var init$1 = t.contents;
              t.contents = {
                transform: propOrValue,
                transformProperty: init$1.transformProperty
              };
              return /* () */0;
            }
          }), captures);
    return t.contents;
  } else {
    return t.contents;
  }
}

function parseTransforms(val_) {
  var transforms = val_.match(transformsRe);
  if (transforms !== null) {
    return transforms;
  } else {
    return [];
  }
}

export {
  testTransform ,
  testTransforms ,
  parseTransform ,
  parseTransforms ,
  
}
/* No side effect */
